clear all; close all; clc;

% Total number of cycles
N = 10^6; % [-]

% Adherent
E   = 70e9; % [Pa]
t   = 0.0032; % [m]
v   = 0.34; % [-]
% Strap (upper, long adherent) length
L_1 = 0.25; % [m]
% lap (lower, short adherent) length
L_2 = 0.2; % [m]

% Adhesive
t_a = 0.0003; % [m]
E_a = 3.1e9; % [Pa]
G_a = 1.1e9; % [Pa]
v_a = 0.4; % [-]

% Load
S_max = 250e3/t; % [N/m^2]
R_load = 0.1; % [-]

% Initial crack length
b = 0; % [m]

% Number of overlap elements
q = 5;

%% Calculations

% Applied force
P_max   = S_max*t;          % [N/m]
P_min   = P_max*R_load;     % [N/m]
P       = [P_min ; P_max];  % [N/m]

% Applied stress
S_min   = S_max*R_load;     % [N/m^2]
S       = [S_min ; S_max];  % [N/m^2]

% Adherent stiffnesses
% Free adherent
D_11 = E*t^3/12;
A_11 = E*t;
% Overlap region (lumped together)
D_00 = 2*E*(t^3/12+t*(t/2+t_a/2)^2) + E_a*t_a^3/12;
A_00 = E*t*2 + E_a*t_a;

% Initital geometry
l_A0 = L_1-(L_2-b);
l_B0 = L_2-b;

% Element length
dla = l_A0/q;
dlb = l_B0/q;

% Element left boundary x0 coordinate
x0 = 0:dlb:l_B0-dlb;
% Element central x0 coordinate
%x0 = dlb/2:dlb:l_B0-dlb/2;

% Create x0 vector for each time an entire element has been cracked
x0 = x0.*ones(q,1);
x0 = x0 - dlb*ones(q,q).*(0:q-1)';
x0(x0<0) = 0;

% Indicator for non-cracked elements (0 = cracked, 1 = non-cracked)
ind = ones(q,q).*triu(ones(q,q));

% Free adherebt length
l_A = l_A0*ones(q,q) + dlb*(0:q-1)';

% Overlap length
l_B = l_B0*ones(q,q) - dlb*(0:q-1)';

% Angle neutral axis w.r.t. adherent neutral axis
alpha = (t + t_a)./(2*(l_A0+l_B0));

% Solution eigenvalues
lambda_1 = sqrt(P(1)/D_11);
lambda_0 = sqrt(P(1)/D_00);

% Integration contants
A_1 = zeros(q,q);
B_1 = -(sqrt(D_11)*(cosh(lambda_0*l_B)*t+cosh(lambda_0*l_B)*t_a+2*alpha*(l_A+l_B)-t-t_a))...
    ./(2*(sqrt(D_11)*cosh(lambda_0*l_B).*sinh(lambda_1*l_A)+sqrt(D_00).*cosh(lambda_1*l_A).*sinh(lambda_0*l_B)));
A_0 = (-2*sqrt(D_00/D_11)*B_1.*cosh(lambda_1*l_A).*sinh(lambda_0*l_B)-2*alpha*(l_A+l_B)+t+t_a)./(2*cosh(lambda_0*l_B));
B_0 = sqrt(D_00/D_11)*B_1.*cosh(lambda_1*l_A);

% Support reaction forces (see FBD)
R_A = 0;
M_A = 0;

% Vertical displacement
w0 = A_0.*cosh(lambda_0.*x0)+B_0.*sinh(lambda_0.*x0)+alpha.*(l_A+x0)-(t+t_a)/2+(l_A + x0).*R_A./P(1)+M_A./P(1)
w0 = triu(ones(q,q)).*w






